              JAVA ========> AASEMBLY 
                Reverse Engineering 

JAVA Source Code 
                ByteCode 
                   |    Native code 
                   |          |    Machine Code         
                   |          |
               Run in JVM    CPU

HEAP  
   Memory area of JVM
JIT & AOT 
 | Place where transfer High-level language to Low-level language
 |
 Inlining 
    Same Target Type (Run target code directly)
    Not Same Target Type (Run target method as a call)
 Optimization 
    Doing least amount of work to accomplish goal                   
        

                Compiler (made by Command line) 
                        
Language-dependent Stages ----> Machine-dependent Stages 
      (Syntax rules)             (Register Allocation)
                       
                  Lexical Analysis 
                      - Done by lexer (Scanner)
                      - Identifies lexemes 
                      - Generates stream of tokens (Regular representation)
                      - Creates symbol & string table
                        |
               Parsing/Syntax Analysis
                  Semantic Analysis
                      - Context-free grammar Backus-Naur form (written by programmer)
                      - Identifies Syntax errors 
                           - Operators, Identifiers 
                      - Concrete/Abstract Syntax tree
                        |
                Intermediate Code 
                      - Three Address Code
                      - Backpatching
                      - Basic Blocks
                        
                                 
              Object Code Genertions 
               Instruction Selection 
                        |
           
           
           
           
