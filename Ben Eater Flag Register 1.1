                       JUMP Instruction 
 # 1
    JUMP on carry          
    JUMP if Carry bit turns on cause 8 bits can't be represented 
                                  
     200 =   1100 1000
    +100 =   0110 0100
     ------------------
     300 = 1 0010 1100
           |     |
    carry bit    44 
    *JUMP 
    
    254 =   1111 1110
   +  3 =   0000 0011
     ------------------
     257 = 1 0000 0001
           |     |
    carry bit    1  
    *JUMP
    
 #  2
    JUMP if zero 
    JUMP if Carry bit turns off
    
    Circuit :
    4 NOR Gates ===> 2 AND Gates ===> 1 AND Gate 
   
                         
                     Flags Register 
 Reset Pin + Data Pin + Input Pin + Read/Store Enable Pin 
                      /         \
                 Carry flag    Zero flag                      
                      
   Store the Status of Carry bit when ALU keep Cycling 
   Store result of Addition 
            
                        
    Instruction   Step   CZ   
JC     0111       010    0x    00000000  00000000
JC     0111       010    1x    00001000  00000010
JC     0111       011    0x    00000000  00000000                      
JC     0111       100    0x    00000000  00000000                  

JZ     1000       010    x0    00000000  00000000
JZ     1000       010    x1    00001000  00000010
JZ     1000       011    0x    00000000  00000000                      
JZ     1000       100    0x    00000000  00000000


                                 Programming 
                  
#define FI   0b0000000000000001  //Flags in 

#define FLAGS_Z0C0 0
#define FLAGS_Z0C1 1
#define FLAGS_Z1C0 2
#define FLAGS_Z1C1 3
 
  type this because Arduino size not enough      
            | 
const PROGMEM unit16_t UCODE_TEMPLATE[16][8] = {
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 0000 - NOP 
  {MI|CO, RO|II|CE, IO|MI, RO|AI, 0,            0, 0, 0},         // 0001 - LDA
  {MI|CO, RO|II|CE, IO|MI, RO|BI, EO|AI|FI,     0, 0, 0},         // 0010 - ADD
  {MI|CO, RO|II|CE, IO|MI, RO|BI, EO|AI|SU|FI,  0, 0, 0},         // 0011 - SUB
  {MI|CO, RO|II|CE, IO|MI, AO|RI, 0,            0, 0, 0},         // 0100 - STA
  {MI|CO, RO|II|CE, IO|AI, 0,     0,            0, 0, 0},         // 0101 - LDI
  {MI|CO, RO|II|CE, IO|J,  0,     0,            0, 0, 0},         // 0111 - JMP 
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1000             
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1001             
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1010             
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1011              
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1100
  {MI|CO, RO|II|CE, 0,     0,     0,            0, 0, 0},         // 1101
  {MI|CO, RO|II|CE, AO|OI, 0,     0,            0, 0, 0},         // 1110 - OUT
  {MI|CO, RO|II|CE, HLT,   0,     0,            0, 0, 0},         // 1111 - HLT  
};

           ZF/CF   16 Instructions   
               |   |
unit16_t ucode[4][16][8];
                      |
                    8 Steps   
void initUcode() {
  // ZF = 0, CF = 0
  memcpy_P(ucode[FLAGS_Z0C0], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  // ZF = 0, CF = 1
  memcpy_P(ucode[FLAGS_Z0C1], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  // ZF = 1, CF = 0
  memcpy_P(ucode[FLAGS_Z1C0], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  // ZF = 1, CF = 1
  memcpy_P(ucode[FLAGS_Z1C1], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
}

//Program data bytes for 2 EEPROM 
Serial.print("Programming EEPROM")
//First half of EEPROM (128 bytes) ---> Low --- related to Chip Pin
 for (int address = 0; address < 1024; address +=1) {
    int flags       = (address & 0b1100000000) >> 8;
    int byte_sel    = (address & 0b0010000000) >> 7;
    int instruction = (address & 0b0001111000) >> 3;
    int step        = (address & 0b0000000111);
    
    if (byte_sel) {
      writeEEPROM(address, ucode[flags][instruction][step]);
    } else {
      writeEEPROM(address, ucode[flags][instruction][step] >> 8);
    } 

void printContents(int start, int length) {
  for (int base = start; base <= length; base += 16) {
    byte data[16];
    for (int offset = 0; offset <= 15; offset += 1) {
      data[offset] = readEEPROM(base + offset);
    }

Serial.print("Reading EEPROM");
printContent(0, 1024);

  
  
