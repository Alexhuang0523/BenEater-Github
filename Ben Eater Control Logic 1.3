                                  First EEPROM               Second EEPROM 
        INSTRUCTION     STEP      HLT MI RI RO IO II AI AO   SO SU BI OI CE CO J
                                         (40)         (0)
FETCH     x x x x      0 0 0       0  1  0  0  0  0  0  0    0  0  0  0  0  1  0
          x x x x      0 0 1       0  0  0  1  0  1  0  0    0  0  0  0  1  0  0

LDA       0 0 0 1      0 1 0       0  1  0  0  1  0  0  0    0  0  0  0  0  0  0
          0 0 0 1      0 1 1       0  0  0  1  0  0  1  0    0  0  0  0  0  0  0
          0 0 0 1      1 0 0       0  0  0  0  0  0  0  0    0  0  0  0  0  0  0

ADD       0 0 1 0      0 1 0       0  1  0  0  1  0  0  0    0  0  0  0  0  0  0
          0 0 1 0      0 1 1       0  0  0  1  0  0  0  0    0  0  1  0  0  0  0
          0 0 1 0      1 0 0       0  0  0  0  0  0  1  0    1  0  0  0  0  0  0

OUT       1 1 1 0      0 1 0       0  0  0  0  0  0  0  1    0  0  0  1  0  0  0
          1 1 1 0      0 1 1       0  0  0  0  0  0  0  0    0  0  0  0  0  0  0
          1 1 1 0      1 0 0       0  0  0  0  0  0  0  0    0  0  0  0  0  0  0
                       
HLT       1 1 1 1      0 1 0       1  0  0  0  0  0  0  0    0  0  0  0  0  0  0
          1 1 1 1      0 1 1       0  0  0  0  0  0  0  0    0  0  0  0  0  0  0
          1 1 1 1      1 0 0       0  0  0  0  0  0  0  0    0  0  0  0  0  0  0
          
                       Programming Mirco-Instruction using Arduino 

#define HLT 0b1000000000000000
#define MI  0b0100000000000000
#define RI  0b0010000000000000
#define RO  0b0001000000000000
#define IO  0b0000100000000000
#define II  0b0000010000000000
#define AI  0b0000001000000000
#define AO  0b0000000100000000
#define EO  0b0000000010000000
#define SU  0b0000000001000000
#define BI  0b0000000000100000
#define OI  0b0000000000010000
#define CE  0b0000000000001000
#define CO  0b0000000000000100
#define J   0b0000000000000010

unit16_t data[] = {
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 0000 - NOP 
  MI|CO, RO|II|CE, IO|MI, RO|AI, 0,         0, 0, 0,         // 0001 - LDA
  MI|CO, RO|II|CE, IO|MI, RO|BI, EO|AI,     0, 0, 0,         // 0010 - ADD
  MI|CO, RO|II|CE, IO|MI, RO|BI, EO|AI|SU,  0, 0, 0,         // 0011 - SUB
  MI|CO, RO|II|CE, IO|MI, AO|RI, 0,         0, 0, 0,         // 0100 - STA
  MI|CO, RO|II|CE, IO|AI, 0,     0,         0, 0, 0,         // 0101 - LDI
  MI|CO, RO|II|CE, IO|J,  0,     0,         0, 0, 0,         // 0111 - JMP ----> Change Binary Program Counter 
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1000             J = Binary Program Counter In
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1001             Put Address we want to jump 
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1010             on the bus and load to Binary
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1011             Program Counter 
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1100
  MI|CO, RO|II|CE, 0,     0,     0,         0, 0, 0,         // 1101
  MI|CO, RO|II|CE, AO|OI, 0,     0,         0, 0, 0,         // 1110 - OUT
  MI|CO, RO|II|CE, HLT,   0,     0,         0, 0, 0,         // 1111 - HLT
  
};

 
//Program data bytes for 2 EEPROM 
Serial.print("Programming EEPROM")
//First half of EEPROM (128 bytes) ---> Low --- related to Chip Pin
for (int address = 0; address < sizeof(data)/sizeof(data[0]); address +=1) {
        writeEEPROM(address, data[address] >> 8);
 
        if (address % 64 == 0) {
                Serial.print(".");
        }
 }
 //Second half of EEPROM (128 bytes) ---> High  
 for (int address = 0; address < sizeof(data)/sizeof(data[0]); address +=1) {
        writeEEPROM(address + 128, data[address]);
 
        if (address % 64 == 0) {
                Serial.print(".");
        }
 }
 Serial.println("done");
 
 
 
