                                              Programming 
                                  *Arduino Reference* Function Guidelines 
Using 3 Pins(Arduino) to control 21 Pins(EEPROM) 
#define SHIFT_DATA 2
#define SHIFT_CLK 3
#define SHIFT_LATCH 4
#define EEPROM_D0 5
#define EEPROM_D7 12

void setAddress(int address, bool outputEnable) {                                first bit set     
 // Switch 8 bits to right, remain 3 bits  e.g. 1234 ===> 100 1101 0010              |
 shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, (address >> 8) | (outputEnable ? 0x00 : 0x80));
 shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, address); 
 
 digitalWrite(SHIFT_LATCH, LOW);
 digitalWrite(SHIFT_LATCH, HIGH);
 digitalWrite(SHIFT_LATCH, LOW);
}

byte readEEPROM(int address) {
  setAddress(address, /*outputEnable*/ true);
  byte data = 0;
  for (int pin = EEPROM_D7; pin >= EEPROM_D0 /*read from 7 to 0*/; pin -= 1) {
    data = (data << 1 /*Switch to left*/) + digitalRead(pin);
  }
  return data;
}

void setup() {
  // Setup code, run once 
  printMode(SHIFT_DATA, OUTPUT);
  printMode(SHIFT_CLK, OUTPUT);                                  
  printMode(SHIFT_LATCH, OUTPUT);
  
  *Testing*
  setAddress(1234, false /*Active Low*/);  // Switch Register with LED 
  
  Serial.begin(57600);  // Serial = Port 
  
  *Testing*
  Serial.println(readEEPROM(0) /*read data in position 0*/);  // Read data from Serial not from Pin 
  
  for (int base = 0; base <= 255; base += 16) {
    byte data[16];
    for (int offset = 0; offset <=15; offset += 1) {
      data[offset] = readEEPROM(base + offset);
    }
    
    char buf[80];
    sprintf(buf, "%03x: %02x %02x %02x %02x %02x %02x %02x %02x  %02x %02x %02x %02x %02x %02x %02x %02x",
      base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
      data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
      
    Serial.println(buf);  
    
    }
} 
                  
  // Double shiftOut due to 2 Switch Register 
  shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, 0x55);
  shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, 0x00);
  
  //Activating Store Register by creating a Clock Pulse 
  digitalWrite(SHIFT_LATCH, LOW);
  digitalWrite(SHIFT_LATCH, HIGH);
  digitalWrite(SHIFT_LATCH, LOW);
  
 }

void 




































