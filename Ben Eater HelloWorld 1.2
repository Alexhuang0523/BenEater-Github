ROM (EEPROM AT28C256) 
Program with some different "Instructions" using different "Addresses" 
instead of using Resistors 

Processor x16 Addressline + EEPROM x15 Addressline + NAND Gate + Adapter(Latch)

When the Processor reads all Addressline A0-A15, it will see the contents 
of the EEPROM as repeated twice A0-A14, A15

Connect "Processor A15 line" to the "Chip Enable Signal of EEPROM" with "AND Gate" 
As Processor reads Lower space (A15=low/0) (Chip Enable=0)
EEPROM will output Data (D0-D7) 
As Processor reads Upper space (A15=high/1) (Chip Enable=1)
EEPROM will not output Data (D0-D7)
As Processor reads Upper space (A15=high/1) + Inverter/AND Gate ===> (Enable Chip=low/0)  
CE(Active low) will activate the EEPROM and output Data even Processor reads upper space 
Due to the design of chip we use Inverter/AND Gate to activate the enable signal 

EEPROM <===> Processor  
#  1   
Programming EEPROM    
Now Processor is reading low A0-A14 Addressline 
Adjust the starting location of executing instruction becomes ea ===> 8,000 (Dataline)
read by Processor 
rom[0x7ffc] = 0x00
rom[0x7ffd] = 0x80
Example : 
ea ea ea ea ea ea ea ea ea ea ea ea 00 80 ea ea 
fffc  00
fffd  80

*Operation, Operation Codes and Status Register*
a9 = load particular immediate value to Register A 
8d = store particular immediate value at particular address 
4c = jumping 
If we want to load 42 value to Register A code as below :
rom[0] = 0xa9
rom[1] = 0x42
If we want to store particular immediate value at particular address code as below :
rom[2] = 0x8d
rom[3] = 0x00
rom[4] = 0x60
Now Processor is putting 42 value to the Transfer Bus not done by "EPPROM"
we can latch value of 42 into a Register or any Hardware 
Example :
6000 W 42

                Programme value 55 aa
Adapter(Latch) <===> AND Gate <===> Processor 
# 2   
CS1 CS2
For Adapter to find "Addressline 6000" connecting Processor Addressline to 
Adapter CS1(Active high) CS2(Active low) signal with two AND Gates when
signal are enabled Adapter will pay attention to the data bus "W 42"
A15 0 ===\ 
        ===> 0 CS2     
A14 1 ===/   
A13 1 =====> 1 CS1

      Addressline
Binary 0110 0000 0000 0000  
Hexidecimal 6000 

# 3    
Register Pin  
*Memory Map of Internal Register*
A15 A14 A13 <===> CS2 CS1     6000 = Output Register 
A3 ====> RS3
A2 ====> RS2
A1 ====> RS1                  6002 = Data Direction Register B
A0 ====> RS0                  6001 

*ORB, IRB Operation for Register* 
0xff = 1111 1111 
       8 Pins to be Output tie to LED  

Steps for setting Instruction :
   Setting Data Direction Register B code 
       0xa9 0xff        #load ff
       0x8d 0x02 0x60   #store at Register 6002
   Setting Output Register B code 
       0xa9 0x55
       0x8d 0x00 0x60
       0xa9 0xaa
       0x8d 0x00 0x60
   Setting jumping to Address 8005 code
       0x4c 0x05 0x80   #jump to 0xa9 0x55







