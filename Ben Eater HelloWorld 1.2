ROM (EEPROM AT28C256) 
Program with some different "Instructions" using different "Addresses" 
instead of using Resistors 

Processor x16 Addressline 
EEPROM    x15 Addressline
NAND Gate
Adapter (Latch)

When the Processor reads all Addressline A0-A15, it will see the contents 
of the EEPROM as repeated twice A0-A14, A15

Connect "Processor A15 line" High to the "Chip Enable Signal of EEPROM" with
"NAND Gate" 
As Processor reads Lower space (A15=low/0) (Chip Enable=0)
EEPROM will output Data (D0-D7) 
As Processor reads Upper space (A15=high/1) (Chip Enable=1)
EEPROM will not output Data (D0-D7)
As Processor reads Upper space (A15=high/1) + Inverter/AND Gate ===> (Enable Chip=low/0)  
0 CE will activate the EEPROM and output Data even processor reads upper space (Design issue) 

#1   Programming EEPROM : 
Now Processor is reading low A0-A14 Addressline 
Adjust the starting location of executing instruction becomes ea ===> 8,000 (Dataline)
read by Processor 
rom[0x7ffc] = 0x00
rom[0x7ffd] = 0x80
Example : 
ea ea ea ea ea ea ea ea ea ea ea ea 00 80 ea ea 
fffc  00
fffd  80

*Operation, Operation Codes and Status Register*
a9 = load particular immediate value to Register A 
8d = store particular immediate value at particular address 
4c = jumping 
If we want to load 42 value to Register A code as below :
rom[0] = 0xa9
rom[1] = 0x42
If we want to store particular immediate value at particular address code as below :
rom[2] = 0x8d
rom[3] = 0x00
rom[4] = 0x60
Now Processor is putting 42 value to the Transfer Bus not done by "EPPROM"
we can latch value of 42 into a Register or any Hardware 
Example :
6000 W 42

#2    Adapter 
In order to capture "Address 6000 W 42" outputted by Processor 
Connect Processor to Adapter(Latch) CS1 CS2 with two NAND Gates    
0 1 1

*Memory Map of Internal Register* for Adapter (Latch)
6000 = Output Register 
6002 = Data Direction Register B
*ORB, IRB Operation for Register*
ff (1111 1111) = Set as output 
Steps :
Setting anything stored in Register port B to be output of LED light code as below :
0xa9 0xff
0x8d 0x02 0x60
Outputting anything from Register B code as below :
0xa9 0x55
0x8d 0x00 0x60

0xa9 0xaa
0x8d 0x00 0x60
Jumping to Address 8000 code as below : 
0x4c 0x00 0x80

#3    LCD Interface
Each Hardware comes with a Datasheet of Instruction for connecting to computer (Binary) 
for example :
Clear display
Return home 
Display on/off (Cursor)






